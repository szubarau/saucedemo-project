{"name": "Successful login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=112.0.5615.138)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x0038DCE3+50899]\n\t(No symbol) [0x0031E111]\n\t(No symbol) [0x00225588]\n\t(No symbol) [0x0020D333]\n\t(No symbol) [0x0026F4DB]\n\t(No symbol) [0x0027DB33]\n\t(No symbol) [0x0026B6F6]\n\t(No symbol) [0x00247708]\n\t(No symbol) [0x0024886D]\n\tGetHandleVerifier [0x005F3EAE+2566302]\n\tGetHandleVerifier [0x006292B1+2784417]\n\tGetHandleVerifier [0x0062327C+2759788]\n\tGetHandleVerifier [0x00425740+672048]\n\t(No symbol) [0x00328872]\n\t(No symbol) [0x003241C8]\n\t(No symbol) [0x003242AB]\n\t(No symbol) [0x003171B7]\n\tBaseThreadInitThunk [0x7676FA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77C07A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77C07A6E+238]", "trace": "index_page = <pages.index_page.IndexPage object at 0x000001BDD92F46D0>\n\n    @pytest.mark.ui\n    @pytest.mark.smoke\n    @allure.description('Testing successful login')\n    @allure.label('owner', 'Sergey')\n    @allure.title('Successful login')\n    @allure.suite('Authorization suite')\n    @allure.severity(allure.severity_level.BLOCKER)\n    def test_login(index_page):\n        index_page.login(USERNAME,PASSWORD)\n>       index_page.verify_title_text()\n\ntest_index_page.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\index_page.py:42: in verify_title_text\n    self.assert_equal(\"Products\", self.get_text(Locators.TITLE_TEXT))\n..\\base_object\\base.py:35: in get_text\n    return self.is_visible(locator).text\n..\\base_object\\base.py:15: in is_visible\n    return self.wait.until(ec.visibility_of_element_located(locator))\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:86: in until\n    value = method(self._driver)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:139: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:831: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001BDD92F78B0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C07A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C07A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=112.0.5615.138)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0038DCE3+50899]\nE       \t(No symbol) [0x0031E111]\nE       \t(No symbol) [0x00225588]\nE       \t(No symbol) [0x0020D333]\nE       \t(No symbol) [0x0026F4DB]\nE       \t(No symbol) [0x0027DB33]\nE       \t(No symbol) [0x0026B6F6]\nE       \t(No symbol) [0x00247708]\nE       \t(No symbol) [0x0024886D]\nE       \tGetHandleVerifier [0x005F3EAE+2566302]\nE       \tGetHandleVerifier [0x006292B1+2784417]\nE       \tGetHandleVerifier [0x0062327C+2759788]\nE       \tGetHandleVerifier [0x00425740+672048]\nE       \t(No symbol) [0x00328872]\nE       \t(No symbol) [0x003241C8]\nE       \t(No symbol) [0x003242AB]\nE       \t(No symbol) [0x003171B7]\nE       \tBaseThreadInitThunk [0x7676FA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C07A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C07A6E+238]\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: NoSuchWindowException"}, "description": "Testing successful login", "steps": [{"name": "verify title text", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=112.0.5615.138)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x0038DCE3+50899]\n\t(No symbol) [0x0031E111]\n\t(No symbol) [0x00225588]\n\t(No symbol) [0x0020D333]\n\t(No symbol) [0x0026F4DB]\n\t(No symbol) [0x0027DB33]\n\t(No symbol) [0x0026B6F6]\n\t(No symbol) [0x00247708]\n\t(No symbol) [0x0024886D]\n\tGetHandleVerifier [0x005F3EAE+2566302]\n\tGetHandleVerifier [0x006292B1+2784417]\n\tGetHandleVerifier [0x0062327C+2759788]\n\tGetHandleVerifier [0x00425740+672048]\n\t(No symbol) [0x00328872]\n\t(No symbol) [0x003241C8]\n\t(No symbol) [0x003242AB]\n\t(No symbol) [0x003171B7]\n\tBaseThreadInitThunk [0x7676FA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77C07A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77C07A6E+238]\n\n", "trace": "  File \"C:\\Users\\szubarev\\PycharmProjects\\Saucedemo\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\szubarev\\PycharmProjects\\Saucedemo\\pages\\index_page.py\", line 42, in verify_title_text\n    self.assert_equal(\"Products\", self.get_text(Locators.TITLE_TEXT))\n  File \"C:\\Users\\szubarev\\PycharmProjects\\Saucedemo\\base_object\\base.py\", line 35, in get_text\n    return self.is_visible(locator).text\n  File \"C:\\Users\\szubarev\\PycharmProjects\\Saucedemo\\base_object\\base.py\", line 15, in is_visible\n    return self.wait.until(ec.visibility_of_element_located(locator))\n  File \"C:\\Users\\szubarev\\PycharmProjects\\Saucedemo\\venv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 86, in until\n    value = method(self._driver)\n  File \"C:\\Users\\szubarev\\PycharmProjects\\Saucedemo\\venv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 139, in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n  File \"C:\\Users\\szubarev\\PycharmProjects\\Saucedemo\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 831, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n  File \"C:\\Users\\szubarev\\PycharmProjects\\Saucedemo\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 440, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\szubarev\\PycharmProjects\\Saucedemo\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1682687504682, "stop": 1682687505199}], "attachments": [{"name": "log", "source": "c3778337-3699-408a-ba33-81cdf47fb7d5-attachment.txt", "type": "text/plain"}], "start": 1682687504356, "stop": 1682687505205, "uuid": "d5a0553c-93f2-4831-b2bb-7aca01d710e8", "historyId": "b87f5467554d70365a0af541ee685911", "testCaseId": "934a251c80a6d801a794a279d21cd912", "fullName": "tests.test_index_page#test_login", "labels": [{"name": "suite", "value": "Authorization suite"}, {"name": "owner", "value": "Sergey"}, {"name": "severity", "value": "blocker"}, {"name": "tag", "value": "smoke"}, {"name": "tag", "value": "ui"}, {"name": "parentSuite", "value": "tests"}, {"name": "host", "value": "cotvec-378"}, {"name": "thread", "value": "15564-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_index_page"}]}